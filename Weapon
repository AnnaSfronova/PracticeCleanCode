namespace MyApp
{
    internal class Program
    {
        public interface IDamagable
        {
            public void TakeDamage(int damage);
        }

        class Player : IDamagable
        {
            private int _health;

            public Player(int health)
            {
                ArgumentOutOfRangeException.ThrowIfNegativeOrZero(health);

                _health = health;
            }

            public void TakeDamage(int damage)
            {
                ArgumentOutOfRangeException.ThrowIfNegative(damage);

                _health -= damage;

                if (_health < 0)
                    _health = 0;
            }
        }

        class Bot
        {
            private readonly Weapon _weapon;

            public Bot(Weapon weapon)
            {
                _weapon = weapon ?? throw new ArgumentNullException(nameof(weapon));
            }

            public void OnSeePlayer(IDamagable damagable)
            {
                ArgumentNullException.ThrowIfNull(damagable);

                _weapon.Fire(damagable);
            }
        }

        class Weapon
        {
            private int _damage;
            private int _bullets;

            public Weapon(int damage, int bullets)
            {
                ArgumentOutOfRangeException.ThrowIfNegative(damage);
                ArgumentOutOfRangeException.ThrowIfNegative(bullets);

                _damage = damage;
                _bullets = bullets;
            }

            public void Fire(IDamagable damagable)
            {
                ArgumentNullException.ThrowIfNull(damagable);

                if (_bullets <= 0)
                    throw new InvalidOperationException(nameof(_bullets));

                damagable.TakeDamage(_damage);
                _bullets--;
            }
        }
    }
}
