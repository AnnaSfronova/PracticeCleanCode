class Player
{
    private readonly Mover _mover;
    private readonly Weapon _weapon;

    public Player(Mover mover, Weapon weapon, string name, int age)
    {
        ArgumentNullException.ThrowIfNull(mover);
        ArgumentNullException.ThrowIfNull(weapon);
        ArgumentException.ThrowIfNullOrEmpty(name);
        ArgumentOutOfRangeException.ThrowIfNegativeOrZero(age);

        _mover = mover;
        _weapon = weapon;
        Name = name;
        Age = age;
    }

    public string Name { get; }
    public int Age { get; }

    public void Attack()
    {
        if (_weapon.IsReloading() == false)
            _weapon.Attack();
    }

    public void Move()
    {
        _mover.Move();
    }
}

class Mover
{
    private float _directionX;
    private float _directionY;
    private float _speed;

    public Mover(float directionX, float directionY, float speed)
    {
        ArgumentOutOfRangeException.ThrowIfNegative(speed);

        _directionX = Math.Clamp(directionX, -1f, 1f);
        _directionY = Math.Clamp(directionY, -1f, 1f);
        _speed = speed;
    }

    public void Move()
    {
        //Do move
    }
}

class Weapon
{
    private int _damage;
    private float _cooldown;

    public Weapon(int damage, int cooldown)
    {
        ArgumentOutOfRangeException.ThrowIfNegative(damage);
        ArgumentOutOfRangeException.ThrowIfNegative(cooldown);

        _damage = damage;
        _cooldown = cooldown;
    }

    public void Attack()
    {
        //Do attack
    }

    public bool IsReloading()
    {
        throw new NotImplementedException();
    }
}
