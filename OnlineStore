using System;
using System.Collections.Generic;
using System.Linq;

namespace MyApp
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Good iPhone12 = new Good("IPhone 12");
            Good iPhone11 = new Good("IPhone 11");

            Warehouse warehouse = new Warehouse();

            Shop shop = new Shop(warehouse);

            warehouse.Add(iPhone12, 10);
            warehouse.Add(iPhone11, 1);

            warehouse.ShowGoods(); //Вывод всех товаров на складе с их остатком

            Cart cart = shop.GetCart();
            cart.Add(iPhone12, 4);
            cart.Add(iPhone11, 3); //при такой ситуации возникает ошибка так, как нет нужного количества товара на складе

            cart.ShowGoods(); //Вывод всех товаров в корзине

            Console.WriteLine(cart.Order().Paylink);

            cart.Add(iPhone12, 9); //Ошибка, после заказа со склада убираются заказанные товары
        }

        public class Shop
        {
            private readonly Warehouse _warehouse;

            public Shop(Warehouse warehouse)
            {
                _warehouse = warehouse ?? throw new ArgumentNullException(nameof(warehouse));
            }

            public Cart GetCart()
            {
                return new Cart(_warehouse);
            }
        }

        public class Warehouse : IInventory
        {
            private readonly Dictionary<string, Cell> _cells;

            public Warehouse()
            {
                _cells = new();
            }

            public void Add(Good good, int count)
            {
                ArgumentNullException.ThrowIfNull(good);
                ArgumentOutOfRangeException.ThrowIfNegative(count);

                if (_cells.ContainsKey(good.Name))
                    _cells[good.Name].Add(count);
                else
                    _cells.Add(good.Name, new Cell(good, count));
            }

            public void ShowGoods()
            {
                foreach (var cell in _cells)
                    Console.WriteLine(cell);
            }

            public Cell GetGoods(Good good, int count)
            {
                ArgumentNullException.ThrowIfNull(good);
                ArgumentOutOfRangeException.ThrowIfNegative(count);

                if (_cells.ContainsKey(good.Name) == false)
                    throw new ArgumentNullException(nameof(good));

                ArgumentOutOfRangeException.ThrowIfGreaterThan(count, _cells[good.Name].Count);

                Cell cell = _cells[good.Name];
                cell.Reduce(count);
                return new Cell(good, count);
            }
        }

        public class Cart
        {
            private readonly IInventory _inventory;
            private readonly Dictionary<string, Cell> _cells;

            public Cart(IInventory inventory)
            {
                _inventory = inventory ?? throw new ArgumentNullException(nameof(inventory));
                _cells = new();
            }

            public void Add(Good good, int count)
            {
                ArgumentNullException.ThrowIfNull(good);
                ArgumentOutOfRangeException.ThrowIfNegative(count);

                Cell cell = _inventory.GetGoods(good, count) ?? throw new ArgumentNullException(nameof(cell));

                if (_cells.ContainsKey(good.Name))
                    _cells[cell.Good.Name].Add(cell.Count);
                else
                    _cells.Add(cell.Good.Name, new Cell(cell.Good, cell.Count));
            }

            public void ShowGoods()
            {
                foreach (var cell in _cells)
                    Console.WriteLine(cell);
            }

            public OrderInfo Order() => new();
        }

        public class Cell
        {
            public Good Good { get; }
            public int Count { get; private set; }

            public Cell(Good good, int count)
            {
                Good = good ?? throw new ArgumentNullException(nameof(good));

                ArgumentOutOfRangeException.ThrowIfNegative(count);
                Count = count;
            }

            public void Add(int count)
            {
                ArgumentOutOfRangeException.ThrowIfNegative(count);
                Count += count;
            }

            public void Reduce(int count)
            {
                ArgumentOutOfRangeException.ThrowIfNegative(count);
                ArgumentOutOfRangeException.ThrowIfGreaterThan(count, Count);
                Count -= count;
            }

            public override string ToString()
            {
                return $"{Good.Name}: {Count} шт.";
            }
        }

        public class Good
        {
            public string Name { get; }

            public Good(string name)
            {
                Name = name ?? throw new ArgumentNullException();
            }
        }

        public class OrderInfo
        {
            public string Paylink { get; }

            public OrderInfo()
            {
                Paylink = "Заказ собран";
            }
        }

        public interface IInventory
        {
            public Cell GetGoods(Good good, int count);
        }
    }
}
